<?php

namespace app\Controlleur;
use App\Modele\UserModel;
use Exception;

class UserControlleur {
    private $userModel;
    private $db;
    
    // Le constructeur accepte maintenant directement un UserModel
    public function __construct($userModel) {
        $this->userModel = $userModel;
    }
    public function index() {
        try {
            $users = $this->userModel->getAllUsers();
            require __DIR__ . '/../vue/users.php';
        } catch (Exception $e) {
            error_log("Erreur dans index: " . $e->getMessage());
            die("Une erreur est survenue lors du chargement des utilisateurs");
        }
    }

    // Method to fetch all orders with user information
    public function listAllCommandes() {
        try {
            return $this->userModel->getAllCommandes();
     * @param int $id ID de l'utilisateur à afficher
     */
    public function view($id) {
        try {
            error_log("Tentative d'affichage de l'utilisateur avec l'ID: " . $id);
            
            // Vérifier que l'ID est valide
            if (!is_numeric($id) || $id <= 0) {
                throw new Exception('ID utilisateur invalide');
            }
            
            // Récupérer les informations de l'utilisateur
            $user = $this->userModel->getUserInfo($id);
            error_log("Données utilisateur récupérées: " . print_r($user, true));
            
            if (!$user) {
                throw new Exception('Utilisateur non trouvé');
            }
            
            // Afficher la vue avec les détails de l'utilisateur
            require __DIR__ . '/../vue/user_view.php';
            
        } catch (Exception $e) {
            error_log("Erreur dans view: " . $e->getMessage());
            
            // Si c'est une requête AJAX, renvoyer une réponse JSON
            if (!empty($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') {
                header('Content-Type: application/json');
                echo json_encode([
                    'success' => false,
                    'message' => $e->getMessage()
                ]);
                exit;
            }
            
            // Sinon, rediriger avec un message d'erreur
            $_SESSION['error'] = $e->getMessage();
            header('Location: /utilisateurs');
            exit;
        }
    }

    public function profile() {
        // Assurez-vous que l'utilisateur est connecté
        if (!isset($_SESSION['id_utilisateur'])) {
            header("Location: /login");
            exit;
        }

        // Récupération de l'ID de l'utilisateur depuis la session
        $userId = $_SESSION['id_utilisateur'];

        // Appel de la fonction getUserInfo du modèle
        $userInfo = $this->userModel->getUserInfo($userId);

        // Passer les informations de l'utilisateur à la vue
        include '../Vue/Profile.php';
    }

    // Method to authenticate user (login)
    public function loginUser($email, $password) {
        $user = $this->userModel->checkUser($email, $password);
        
        if ($user) {
            // Store user session or token
            $_SESSION['user_id'] = $user['id_utilisateur'];
            $_SESSION['role'] = $user['role'];
            return true;
        } else {
            return false;
        }
    }

    // Method to display the registration form (optional)
    public function showRegistrationForm() {
        include 'views/register.php'; // Assumes you have a view for registration
    }

    /**
     * Affiche les détails d'un utilisateur
     * 
     * @param int $id ID de l'utilisateur à afficher
     */
    public function show($id) {
        try {
            // Vérifier que l'ID est valide
            if (!is_numeric($id) || $id <= 0) {
                throw new Exception('ID utilisateur invalide');
            }
            
            $user = $this->userModel->getUserInfo($id);
            
            if (!$user) {
                $_SESSION['error'] = 'Utilisateur non trouvé';
                header('Location: /utilisateurs');
                exit;
            }
            
            // Afficher la vue avec les détails de l'utilisateur
            require __DIR__ . '/../Vue/user_details.php';
            
        } catch (Exception $e) {
            error_log("Erreur dans show: " . $e->getMessage());
            $_SESSION['error'] = 'Erreur lors de la récupération des données utilisateur';
            header('Location: /utilisateurs');
            exit;
        }
    }
    
    /**
     * Bascule l'état actif/inactif d'un utilisateur
     * @param int $id ID de l'utilisateur
     * @param int $id ID de l'utilisateur à éditer
     * @return void
     */
    public function edit($id) {
        try {
            // Vérifier que l'ID est valide
            if (!is_numeric($id) || $id <= 0) {
                throw new Exception('ID utilisateur invalide');
            }
            
            $user = $this->userModel->getUserInfo($id);
            
            if (!$user) {
                $_SESSION['error'] = 'Utilisateur non trouvé';
                header('Location: /utilisateurs');
                exit;
            }
            
            // Récupérer la liste des rôles disponibles
            $roles = [
                ['id' => 'admin', 'nom' => 'Administrateur'],
                ['id' => 'user', 'nom' => 'Utilisateur']
            ];
            
            // Afficher le formulaire d'édition
            require __DIR__ . '/../Vue/edit_user.php';
            
        } catch (Exception $e) {
            error_log("Erreur dans edit: " . $e->getMessage());
            $_SESSION['error'] = 'Erreur lors du chargement du formulaire d\'édition';
            header('Location: /utilisateurs');
            exit;
        }
    }
    
    /**
     * Met à jour un utilisateur
     * 
     * @param int $id ID de l'utilisateur à mettre à jour
     * @return void
     */
    public function update($id) {
        try {
            // Vérifier le jeton CSRF
            if (!isset($_POST['_token']) || $_POST['_token'] !== ($_SESSION['csrf_token'] ?? '')) {
                throw new Exception('Jeton de sécurité invalide');
            }
            
            // Vérifier que l'ID est valide
            if (!is_numeric($id) || $id <= 0) {
                throw new Exception('ID utilisateur invalide');
            }
            
            // Récupérer et valider les données du formulaire
            $userData = [
                'nom_utilisateur' => trim($_POST['nom_utilisateur'] ?? ''),
                'prenom' => trim($_POST['prenom'] ?? ''),
                'nom' => trim($_POST['nom'] ?? ''),
                'couriel' => trim($_POST['couriel'] ?? ''),
                'telephone' => trim($_POST['telephone'] ?? ''),
                'role' => $_POST['role'] ?? 'user',
                'actif' => isset($_POST['actif']) && $_POST['actif'] === '1' ? 1 : 0
            ];
            
            // Validation des champs obligatoires
            $requiredFields = ['nom_utilisateur', 'prenom', 'couriel'];
            $missingFields = [];
            
            foreach ($requiredFields as $field) {
                if (empty($userData[$field])) {
                    $missingFields[] = $field;
                }
            }
            
            if (!empty($missingFields)) {
                throw new Exception('Les champs suivants sont obligatoires: ' . implode(', ', $missingFields));
            }
            
            // Validation de l'email
            if (!filter_var($userData['couriel'], FILTER_VALIDATE_EMAIL)) {
                throw new Exception('L\'adresse email n\'est pas valide');
            }
            
            // Vérifier si l'utilisateur existe
            $existingUser = $this->userModel->getUserInfo($id);
            if (!$existingUser) {
                throw new Exception('Utilisateur non trouvé');
            }
            
            // Mettre à jour l'utilisateur
            $result = $this->userModel->updateUser($id, $userData);
            
            if ($result === true) {
                $_SESSION['success'] = 'Utilisateur mis à jour avec succès';
                header('Location: /utilisateurs');
                exit;
            } else {
                throw new Exception(is_string($result) ? $result : 'Erreur lors de la mise à jour de l\'utilisateur');
            }
            
        } catch (Exception $e) {
            error_log("Erreur dans update: " . $e->getMessage());
            $_SESSION['error'] = $e->getMessage();
            header("Location: /utilisateur/edit/$id");
            exit;
        }
    }
    
    /**
     * Affiche le formulaire d'édition d'un utilisateur
     * 
     * @param int $id_utilisateur ID de l'utilisateur à éditer
     * @return array Les données de l'utilisateur pour l'édition
     */
    public function editUser($id_utilisateur) {
        try {
            $user = $this->userModel->getUserInfo($id_utilisateur);
            
            if (!$user) {
                throw new Exception("Utilisateur non trouvé");
            }
            
            // Retourner les données au format JSON pour le formulaire d'édition
            header('Content-Type: application/json');
            echo json_encode([
                'success' => true,
                'user' => $user
            ]);
            exit;
            
        } catch (Exception $e) {
            header('Content-Type: application/json');
            http_response_code(404);
            echo json_encode([
                'success' => false,
                'message' => $e->getMessage()
            ]);
            exit;
        }
    }
    
    /**
     * Affiche les détails d'un utilisateur dans une modale
     * 
     * @param int $id_utilisateur ID de l'utilisateur à afficher
     * @return void
     */
    public function viewUser($id_utilisateur) {
        header('Content-Type: application/json');
        
        try {
            // Vérifier que l'ID est valide
            if (!is_numeric($id_utilisateur) || $id_utilisateur <= 0) {
                throw new Exception('ID utilisateur invalide');
            }
            
            $user = $this->userModel->getUserInfo($id_utilisateur);
            
            if (!$user) {
                http_response_code(404);
                echo json_encode([
                    'success' => false, 
                    'message' => 'Utilisateur non trouvé'
                ]);
                exit;
            }
            
            // Formater les données de l'utilisateur pour la réponse
            $userData = [
                'id_utilisateur' => $user['id_utilisateur'] ?? null,
                'nom_utilisateur' => $user['nom_utilisateur'] ?? null,
                'prenom' => $user['prenom'] ?? null,
                'nom' => $user['nom'] ?? null,
                'couriel' => $user['couriel'] ?? null,
                'telephone' => $user['telephone'] ?? null,
                'role' => $user['role'] ?? 'user',
                'actif' => isset($user['actif']) ? (bool)$user['actif'] : true,
                'date_creation' => $user['date_creation'] ?? null
            ];
            
            echo json_encode([
                'success' => true, 
                'user' => $userData
            ]);
            exit;
            
        } catch (Exception $e) {
            error_log("Erreur dans viewUser: " . $e->getMessage());
            
            http_response_code(500);
            echo json_encode([
                'success' => false, 
                'message' => 'Erreur lors de la récupération des données utilisateur: ' . $e->getMessage()
            ]);
            exit;
        }
    }
    
    /**
     * Supprime un utilisateur
     * 
     * @param int $id_utilisateur ID de l'utilisateur à supprimer
     * @return array Résultat de l'opération
     */
    public function deleteUser($id_utilisateur) {
        try {
            // Vérifier que l'utilisateur ne se supprime pas lui-même
            if (isset($_SESSION['id_utilisateur']) && $_SESSION['id_utilisateur'] == $id_utilisateur) {
                throw new Exception("Vous ne pouvez pas supprimer votre propre compte");
            }
            
            // Vérifier si la méthode est POST (requête AJAX)
            if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
                throw new Exception("Méthode non autorisée");
            }
            
            // Supprimer l'utilisateur
            $result = $this->userModel->deleteUser($id_utilisateur);
            
            if ($result !== true) {
                throw new Exception($result);
            }
            
            // Retourner une réponse JSON
            header('Content-Type: application/json');
            echo json_encode([
                'success' => true,
                'message' => 'Utilisateur supprimé avec succès'
            ]);
            exit;
            
        } catch (Exception $e) {
            header('Content-Type: application/json');
            http_response_code(400);
            echo json_encode([
                'success' => false,
                'message' => $e->getMessage()
            ]);
            exit;
        }
    }

    // Method to display user login form (optional)
    public function showLoginForm() {
        try {
            // Vérifier si l'utilisateur est déjà connecté
            if (isset($_SESSION['id_utilisateur'])) {
                header('Location: /profile');
                exit;
            }
            
            // Afficher le formulaire de connexion
            include __DIR__ . '/../Vue/login.php';
        } catch (Exception $e) {
            error_log("Erreur dans showLoginForm: " . $e->getMessage());
            die("Une erreur est survenue lors du chargement du formulaire de connexion");
        }
    }

    // Method to handle the logout
    public function logoutUser() {
        try {
            // Détruire toutes les données de session
            $_SESSION = [];
            
            // Supprimer le cookie de session s'il existe
            if (ini_get("session.use_cookies")) {
                $params = session_get_cookie_params();
                setcookie(session_name(), '', time() - 42000,
                    $params["path"], $params["domain"],
                    $params["secure"], $params["httponly"]
                );
            }
            
            // Détruire la session
            session_destroy();
            
            // Rediriger vers la page d'accueil
            header('Location: /');
            exit;
        } catch (Exception $e) {
            error_log("Erreur dans logoutUser: " . $e->getMessage());
            header('Location: /');
            exit;
        }
    }

    // Fonction pour récupérer les commandes d'un utilisateur
    public function getUserOrders($userId) {
        // Appeler la fonction getUserCommandWithStatus en passant la connexion PDO
        return $this->userModel->getUserCommandWithStatus($userId);
    }
    
    /**
     * Bascule l'état actif/inactif d'un utilisateur
     * @param int $id ID de l'utilisateur
     */
    public function toggleStatus($id) {
        // Désactiver la sortie de débogage
        if (ob_get_level()) {
            ob_end_clean();
        }
        
        // Définir l'en-tête JSON
        header('Content-Type: application/json');
        
        try {
            // Appeler le modèle pour basculer le statut
            $result = $this->userModel->toggleUserStatus($id);
            
            // Vérifier le résultat
            if (!$result['success']) {
                throw new Exception($result['message'] ?? 'Erreur inconnue lors de la mise à jour du statut');
            }
            
            // Envoyer la réponse de succès
            $response = [
                'success' => true,
                'message' => $result['message'],
                'est_actif' => $result['est_actif']
            ];
            
            echo json_encode($response);
            
        } catch (Exception $e) {
            http_response_code(400);
            $response = [
                'success' => false,
                'message' => $e->getMessage()
            ];
            
            error_log("Erreur dans toggleStatus: " . $e->getMessage() . "\n" . $e->getTraceAsString());
            echo json_encode($response);
        }
        
        // S'assurer qu'aucune autre sortie n'est faite
        exit;
    }
    
    /**
     * Récupère les informations d'un utilisateur
     * @param int $id ID de l'utilisateur
     */
    public function getUserInfo($id) {
        if (ob_get_level()) {
            ob_end_clean();
        }
        
        header('Content-Type: application/json');
        
        try {
            $userInfo = $this->userModel->getUserInfo($id);
            
            if (!$userInfo) {
                throw new Exception('Utilisateur non trouvé');
            }
            
            // Ne pas envoyer le mot de passe même s'il est hashé
            unset($userInfo['mot_de_passe']);
            
            echo json_encode([
                'success' => true,
                'user' => $userInfo
            ]);
            
        } catch (Exception $e) {
            http_response_code(404);
            echo json_encode([
                'success' => false,
                'message' => $e->getMessage()
            ]);
        }
        
        exit;
    }
    
    /**
     * Met à jour les informations d'un utilisateur
     * @param int $id ID de l'utilisateur
     */
    public function updateUserInfo($id) {
        if (ob_get_level()) {
            ob_end_clean();
        }
        
        header('Content-Type: application/json');
        
        try {
            // Récupérer les données JSON du corps de la requête
            $json = file_get_contents('php://input');
            $data = json_decode($json, true);
            
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new Exception('Données JSON invalides');
            }
            
            // Valider les données requises
            $requiredFields = ['nom', 'prenom', 'courriel', 'telephone'];
            foreach ($requiredFields as $field) {
                if (empty($data[$field])) {
                    throw new Exception("Le champ $field est requis");
                }
            }
            
            // Mettre à jour l'utilisateur
            $result = $this->userModel->updateUser($id, [
                'nom_utilisateur' => $data['nom'],
                'prenom' => $data['prenom'],
                'courriel' => $data['courriel'],
                'telephone' => $data['telephone'],
                // Ajoutez d'autres champs si nécessaire
            ]);
            
            if (!$result) {
                throw new Exception('Échec de la mise à jour des informations');
            }
            
            echo json_encode([
                'success' => true,
                'message' => 'Informations mises à jour avec succès'
            ]);
            
        } catch (Exception $e) {
            http_response_code(400);
            echo json_encode([
                'success' => false,
                'message' => $e->getMessage()
            ]);
        }
        
        exit;
    }
}

?>
